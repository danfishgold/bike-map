import fetch from 'node-fetch'

// Based on this: https://help.openstreetmap.org/questions/64879/get-all-bicycle-infrastructure-for-a-city/64898
const overpassTurboQuery = `
/*
This has been generated by the overpass-turbo wizard.
The original search was:
“(cycleway=lane) or (cycleway=track) or (highway=cycleway) or (highway=footway and highway=path and (bicycle=yes or bicycle=designated or bicycle=official))”
*/
[out:json][timeout:25];
// gather results
(
  // query part for: “cycleway=lane”
  node["cycleway"="lane"]({{bbox}});
  way["cycleway"="lane"]({{bbox}});
  relation["cycleway"="lane"]({{bbox}});
  // query part for: “cycleway=track”
  node["cycleway"="track"]({{bbox}});
  way["cycleway"="track"]({{bbox}});
  relation["cycleway"="track"]({{bbox}});
  // query part for: “highway=cycleway”
  node["highway"="cycleway"]({{bbox}});
  way["highway"="cycleway"]({{bbox}});
  relation["highway"="cycleway"]({{bbox}});
  // query part for: “highway=footway and highway=path and bicycle=yes”
  node["highway"="footway"]["highway"="path"]["bicycle"="yes"]({{bbox}});
  way["highway"="footway"]["highway"="path"]["bicycle"="yes"]({{bbox}});
  relation["highway"="footway"]["highway"="path"]["bicycle"="yes"]({{bbox}});
  // query part for: “highway=footway and highway=path and bicycle=designated”
  node["highway"="footway"]["highway"="path"]["bicycle"="designated"]({{bbox}});
  way["highway"="footway"]["highway"="path"]["bicycle"="designated"]({{bbox}});
  relation["highway"="footway"]["highway"="path"]["bicycle"="designated"]({{bbox}});
  // query part for: “highway=footway and highway=path and bicycle=official”
  node["highway"="footway"]["highway"="path"]["bicycle"="official"]({{bbox}});
  way["highway"="footway"]["highway"="path"]["bicycle"="official"]({{bbox}});
  relation["highway"="footway"]["highway"="path"]["bicycle"="official"]({{bbox}});
);
// print results
out body;
>;
out skel qt;
`

const bbox =
  '32.008075959291055,34.6014404296875,32.19304652202036,35.10200500488281'
const query = overpassTurboQuery.replaceAll('{{bbox}}', bbox)

async function fetchOSMData() {
  const repsonse = await fetch('https://overpass-api.de/api/interpreter', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',
    },
    body: query,
  })
  const osmJson = await repsonse.text()
  return osmJson
}

fetchOSMData()
  .then((data) => console.log(data))
  .catch((err) => {
    console.error(err)
    process.exit(1)
  })
